# Global Settings
[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true
CARGO_TARGET_DIR = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target"
SKIP_TEST = false

# Add clippy to the default flow
[tasks.dev-test-flow]
dependencies = [
  "format-flow",
  "format-toml-conditioned-flow",
  "pre-build",
  "build",
  "post-build",
  "test-flow",
  "clippy",
]

# Patching the default flows to skip testing of wasm32-wasi targets
[tasks.pre-test]
condition = { env = { CARGO_MAKE_CRATE_TARGET_TRIPLE = "wasm32-wasi" } }
env = { SKIP_TEST = true }

[tasks.test]
args = ["test", "--", "@@split(CARGO_MAKE_TASK_ARGS,;)"]
condition = { env_false = ["SKIP_TEST"] }
dependencies = ["pre-test"]

[tasks.post-test]
env = { SKIP_TEST = false }

# Running Zellij using the development data directory
[tasks.run]
dependencies = ["build-workspace", "build-dev-data-dir"]
run_task = "launch"
workspace = false

[tasks.build-workspace]
run_task = { name = "build", fork = true }

[tasks.build]
args = ["build"]

[tasks.build-release]
args = ["build", "--release"]

[tasks.build-dev-data-dir]
dependencies = ["build-plugins"]
script = '''
target_dir = set ${CARGO_TARGET_DIR}
data_dir = set ${target_dir}/dev-data
rm -r ${data_dir}
plugins = glob_array ${target_dir}/wasm32-wasi/debug/*.wasm
mkdir ${data_dir}
mkdir ${data_dir}/plugins
for plugin in ${plugins}
    plugin_name = basename ${plugin}
    cp ${plugin} ${data_dir}/plugins/${plugin_name}
end
writefile ${data_dir}/VERSION ${CARGO_MAKE_CRATE_VERSION}
'''
script_runner = "@duckscript"

[tasks.build-e2e-data-dir]
dependencies = ["build-plugins-release"]
script = '''
target_dir = set ${CARGO_TARGET_DIR}
data_dir = set ${target_dir}/e2e-data
rm -r ${data_dir}
plugins = glob_array ${target_dir}/wasm32-wasi/release/*.wasm
mkdir ${data_dir}
mkdir ${data_dir}/plugins
for plugin in ${plugins}
    plugin_name = basename ${plugin}
    cp ${plugin} ${data_dir}/plugins/${plugin_name}
end
writefile ${data_dir}/VERSION ${CARGO_MAKE_CRATE_VERSION}
'''
script_runner = "@duckscript"

[tasks.launch]
args = [
  "run",
  "--",
  "--data-dir",
  "${CARGO_TARGET_DIR}/dev-data/",
  "@@split(CARGO_MAKE_TASK_ARGS,;)",
]
command = "cargo"

# Simple clippy tweak
[tasks.clippy]
args = [
  "clippy",
  "--all-targets",
  "--all-features",
  "--",
  "--deny",
  "warnings",
  "@@split(CARGO_MAKE_TASK_ARGS,;)",
]

# Release building and installing Zellij
[tasks.install]
dependencies = ["wasm-opt-plugins", "build-release"]
script = '''
if is_dir ${CARGO_MAKE_TASK_ARGS}
    trigger_error "You need to specify a full path for the binary, not just a directory!"
else
    cp ${CARGO_TARGET_DIR}/release/${CARGO_MAKE_CRATE_NAME} ${CARGO_MAKE_TASK_ARGS}
end
'''
script_runner = "@duckscript"
workspace = false

[tasks.build-plugins-release]
env = { CARGO_MAKE_WORKSPACE_INCLUDE_MEMBERS = [
  "plugins/github",
  "plugins/golang",
] }
run_task = { name = "build-release", fork = true }

[tasks.build-plugins]
env = { CARGO_MAKE_WORKSPACE_INCLUDE_MEMBERS = [
  "plugins/github",
  "plugins/golang",
] }
run_task = { name = "build", fork = true }

[tasks.wasm-opt-plugins]
dependencies = ["build-plugins-release"]
script = '''
plugins = glob_array ${CARGO_TARGET_DIR}/wasm32-wasi/release/*.wasm

for plugin in ${plugins}
    mkdir ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/assets/plugins/
    plugin_name = basename ${plugin}
    plugin_out = set ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/assets/plugins/${plugin_name}
    exec wasm-opt -O ${plugin} -o ${plugin_out}
end
'''
script_runner = "@duckscript"

# copy the example default config from assets directory to a more user facing one
[tasks.update-default-config]
dependencies = []
script = '''
cp ${ZELLIJ_ASSETS_DIR}/config/default.yaml ${ZELLIJ_EXAMPLE_DIR}/default.yaml
'''
script_runner = "@duckscript"
workspace = false

# CI Releasing Zellij
[tasks.ci-build-release]
args = [
  "build",
  "--verbose",
  "--release",
  "--target",
  "${CARGO_MAKE_TASK_ARGS}",
]
command = "cross"
dependencies = [
  "setup-cross-compilation",
  "build-plugins-release",
  "wasm-opt-plugins",
]
workspace = false

# Build e2e asset
[tasks.build-e2e]
args = [
  "build",
  "--verbose",
  "--release",
  "--target",
  "x86_64-unknown-linux-musl",
]
command = "cargo"
dependencies = ["build-plugins-release", "build-e2e-data-dir"]
workspace = false

# Run e2e tests - we mark the e2e tests as "ignored" so they will not be run with the normal ones
[tasks.e2e-test]
args = [
  "test",
  "--",
  "--ignored",
  "--nocapture",
  "--test-threads",
  "1",
  "@@split(CARGO_MAKE_TASK_ARGS,;)",
]
command = "cargo"
dependencies = ["build-e2e"]
workspace = false

[tasks.setup-cross-compilation]
args = ["install", "cross"]
command = "cargo"
